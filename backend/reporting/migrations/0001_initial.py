# Generated by Django 4.2.7 on 2025-05-23 01:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('widget_type', models.CharField(choices=[('line_chart', 'Line Chart'), ('bar_chart', 'Bar Chart'), ('pie_chart', 'Pie Chart'), ('donut_chart', 'Donut Chart'), ('metric_card', 'Metric Card'), ('progress_bar', 'Progress Bar'), ('table', 'Data Table')], max_length=50)),
                ('size', models.CharField(choices=[('small', 'Small (1x1)'), ('medium', 'Medium (2x1)'), ('large', 'Large (2x2)'), ('xlarge', 'Extra Large (3x2)')], default='medium', max_length=20)),
                ('data_source', models.CharField(help_text='API endpoint or data source', max_length=100)),
                ('filters', models.TextField(default='{}', help_text='Widget filters (JSON)')),
                ('display_options', models.TextField(default='{}', help_text='Chart colors, labels, etc. (JSON)')),
                ('position_x', models.IntegerField(default=0)),
                ('position_y', models.IntegerField(default=0)),
                ('is_public', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_widgets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidgetPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_x', models.IntegerField(default=0)),
                ('position_y', models.IntegerField(default=0)),
                ('size_override', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'ordering': ['position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='GeneratedReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('execution_time', models.DurationField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('data', models.TextField(default='{}', help_text='Generated report data (JSON)')),
                ('summary_stats', models.TextField(default='{}', help_text='Summary statistics (JSON)')),
                ('csv_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('pdf_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(default='My Dashboard', max_length=255)),
                ('refresh_interval', models.IntegerField(default=300, help_text='Auto-refresh interval in seconds')),
                ('is_default', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard', to=settings.AUTH_USER_MODEL)),
                ('widgets', models.ManyToManyField(through='reporting.DashboardWidgetPosition', to='reporting.dashboardwidget')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('report_type', models.CharField(choices=[('sales_performance', 'Sales Performance'), ('customer_engagement', 'Customer Engagement'), ('task_completion', 'Task Completion'), ('conversion_ratios', 'Conversion Ratios'), ('user_activity', 'User Activity'), ('custom', 'Custom Report')], max_length=50)),
                ('filters', models.TextField(default='{}', help_text='Filters applied to the report (JSON)')),
                ('metrics', models.TextField(default='[]', help_text='List of metrics to include (JSON)')),
                ('date_range', models.TextField(default='{}', help_text='Date range configuration (JSON)')),
                ('grouping', models.TextField(default='{}', help_text='How to group the data (JSON)')),
                ('is_public', models.BooleanField(default=False, help_text='Available to all users')),
                ('is_active', models.BooleanField(default=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('external_emails', models.TextField(default='[]', help_text='External email addresses (JSON)')),
                ('can_download', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.IntegerField(default=0)),
                ('max_access_count', models.IntegerField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='reporting.generatedreport')),
                ('shared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_reports', to=settings.AUTH_USER_MODEL)),
                ('shared_with_users', models.ManyToManyField(blank=True, related_name='received_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly')], max_length=20)),
                ('scheduled_time', models.TimeField(help_text='Time of day to run the report')),
                ('day_of_week', models.IntegerField(blank=True, help_text='Day of week for weekly reports (0=Monday)', null=True)),
                ('day_of_month', models.IntegerField(blank=True, help_text='Day of month for monthly reports', null=True)),
                ('recipients', models.TextField(default='[]', help_text='List of email addresses to send reports to (JSON)')),
                ('is_active', models.BooleanField(default=True)),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_schedules', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='reporting.reporttemplate')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='generatedreport',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='reporting.reporttemplate'),
        ),
        migrations.AddField(
            model_name='dashboardwidgetposition',
            name='dashboard',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reporting.userdashboard'),
        ),
        migrations.AddField(
            model_name='dashboardwidgetposition',
            name='widget',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reporting.dashboardwidget'),
        ),
        migrations.AlterUniqueTogether(
            name='dashboardwidgetposition',
            unique_together={('dashboard', 'widget')},
        ),
    ]
