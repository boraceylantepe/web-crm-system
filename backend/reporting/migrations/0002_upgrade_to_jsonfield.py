# Generated by Django 4.2.7 on 2025-06-17 18:32

from django.db import migrations, models
import json


def convert_textfield_to_json(apps, schema_editor):
    """Convert existing TextField JSON strings to proper JSON objects"""
    ReportTemplate = apps.get_model('reporting', 'ReportTemplate')
    GeneratedReport = apps.get_model('reporting', 'GeneratedReport')
    ReportSchedule = apps.get_model('reporting', 'ReportSchedule')
    DashboardWidget = apps.get_model('reporting', 'DashboardWidget')
    ReportShare = apps.get_model('reporting', 'ReportShare')

    # Convert ReportTemplate fields
    for template in ReportTemplate.objects.all():
        try:
            template.filters = json.loads(template.filters) if template.filters else {}
        except (json.JSONDecodeError, TypeError):
            template.filters = {}
        
        try:
            template.metrics = json.loads(template.metrics) if template.metrics else []
        except (json.JSONDecodeError, TypeError):
            template.metrics = []
        
        try:
            template.date_range = json.loads(template.date_range) if template.date_range else {}
        except (json.JSONDecodeError, TypeError):
            template.date_range = {}
        
        try:
            template.grouping = json.loads(template.grouping) if template.grouping else {}
        except (json.JSONDecodeError, TypeError):
            template.grouping = {}
        
        template.save()

    # Convert GeneratedReport fields
    for report in GeneratedReport.objects.all():
        try:
            report.data = json.loads(report.data) if report.data else {}
        except (json.JSONDecodeError, TypeError):
            report.data = {}
        
        try:
            report.summary_stats = json.loads(report.summary_stats) if report.summary_stats else {}
        except (json.JSONDecodeError, TypeError):
            report.summary_stats = {}
        
        report.save()

    # Convert ReportSchedule fields
    for schedule in ReportSchedule.objects.all():
        try:
            schedule.recipients = json.loads(schedule.recipients) if schedule.recipients else []
        except (json.JSONDecodeError, TypeError):
            schedule.recipients = []
        
        schedule.save()

    # Convert DashboardWidget fields
    for widget in DashboardWidget.objects.all():
        try:
            widget.filters = json.loads(widget.filters) if widget.filters else {}
        except (json.JSONDecodeError, TypeError):
            widget.filters = {}
        
        try:
            widget.display_options = json.loads(widget.display_options) if widget.display_options else {}
        except (json.JSONDecodeError, TypeError):
            widget.display_options = {}
        
        widget.save()

    # Convert ReportShare fields
    for share in ReportShare.objects.all():
        try:
            share.external_emails = json.loads(share.external_emails) if share.external_emails else []
        except (json.JSONDecodeError, TypeError):
            share.external_emails = []
        
        share.save()


def reverse_json_to_textfield(apps, schema_editor):
    """Convert JSON objects back to TextField strings if migration is reversed"""
    ReportTemplate = apps.get_model('reporting', 'ReportTemplate')
    GeneratedReport = apps.get_model('reporting', 'GeneratedReport')
    ReportSchedule = apps.get_model('reporting', 'ReportSchedule')
    DashboardWidget = apps.get_model('reporting', 'DashboardWidget')
    ReportShare = apps.get_model('reporting', 'ReportShare')

    # Convert ReportTemplate fields back to strings
    for template in ReportTemplate.objects.all():
        template.filters = json.dumps(template.filters) if template.filters else '{}'
        template.metrics = json.dumps(template.metrics) if template.metrics else '[]'
        template.date_range = json.dumps(template.date_range) if template.date_range else '{}'
        template.grouping = json.dumps(template.grouping) if template.grouping else '{}'
        template.save()

    # Convert GeneratedReport fields back to strings
    for report in GeneratedReport.objects.all():
        report.data = json.dumps(report.data) if report.data else '{}'
        report.summary_stats = json.dumps(report.summary_stats) if report.summary_stats else '{}'
        report.save()

    # Convert ReportSchedule fields back to strings
    for schedule in ReportSchedule.objects.all():
        schedule.recipients = json.dumps(schedule.recipients) if schedule.recipients else '[]'
        schedule.save()

    # Convert DashboardWidget fields back to strings
    for widget in DashboardWidget.objects.all():
        widget.filters = json.dumps(widget.filters) if widget.filters else '{}'
        widget.display_options = json.dumps(widget.display_options) if widget.display_options else '{}'
        widget.save()

    # Convert ReportShare fields back to strings
    for share in ReportShare.objects.all():
        share.external_emails = json.dumps(share.external_emails) if share.external_emails else '[]'
        share.save()


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0001_initial'),
    ]

    operations = [
        # First, convert existing data
        migrations.RunPython(convert_textfield_to_json, reverse_json_to_textfield),
        
        # Then alter the field types
        migrations.AlterField(
            model_name='dashboardwidget',
            name='display_options',
            field=models.JSONField(default=dict, help_text='Chart colors, labels, etc.'),
        ),
        migrations.AlterField(
            model_name='dashboardwidget',
            name='filters',
            field=models.JSONField(default=dict, help_text='Widget filters'),
        ),
        migrations.AlterField(
            model_name='generatedreport',
            name='data',
            field=models.JSONField(default=dict, help_text='Generated report data'),
        ),
        migrations.AlterField(
            model_name='generatedreport',
            name='summary_stats',
            field=models.JSONField(default=dict, help_text='Summary statistics'),
        ),
        migrations.AlterField(
            model_name='reportschedule',
            name='recipients',
            field=models.JSONField(default=list, help_text='List of email addresses to send reports to'),
        ),
        migrations.AlterField(
            model_name='reportshare',
            name='external_emails',
            field=models.JSONField(default=list, help_text='External email addresses'),
        ),
        migrations.AlterField(
            model_name='reporttemplate',
            name='date_range',
            field=models.JSONField(default=dict, help_text='Date range configuration'),
        ),
        migrations.AlterField(
            model_name='reporttemplate',
            name='filters',
            field=models.JSONField(default=dict, help_text='Filters applied to the report'),
        ),
        migrations.AlterField(
            model_name='reporttemplate',
            name='grouping',
            field=models.JSONField(default=dict, help_text='How to group the data'),
        ),
        migrations.AlterField(
            model_name='reporttemplate',
            name='metrics',
            field=models.JSONField(default=list, help_text='List of metrics to include'),
        ),
    ]
